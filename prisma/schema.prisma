// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  phoneNumber String?
  passwordHash String
  role        UserRole @default(USER)
  isApproved  Boolean  @default(false)
  bitnobId    String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User wallet and financial data
  transactions Transaction[]
  savingsPlans SavingsPlan[]
  virtualCards VirtualCard[]
  
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'send', 'receive', 'swap', 'savings', 'card_funding'
  amount      Float
  currency    String
  status      String   // 'pending', 'completed', 'failed'
  description String?
  reference   String?  @unique
  metadata    Json?
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model SavingsPlan {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  frequency   String   // 'daily', 'weekly', 'monthly'
  currency    String
  startDate   DateTime
  endDate     DateTime?
  status      String   @default("active") // 'active', 'paused', 'completed'
  totalSaved  Float    @default(0)
  bitnobPlanId String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("savings_plans")
}

model VirtualCard {
  id          String   @id @default(cuid())
  userId      String
  cardNumber  String?
  cardType    String   @default("virtual")
  balance     Float    @default(0)
  currency    String   @default("USD")
  status      String   @default("active") // 'active', 'blocked', 'expired'
  bitnobCardId String? @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("virtual_cards")
}
